---
- hosts: webinar_lab
  gather_facts: no
  connection: local
  
  tasks:
    - block:
        - name: Find VM by name
          eos_command:
             commands:
                - command: 'show vmtracer vm name {{ id }}'
                  output: 'json'
             provider: "{{ provider }}"
          register: output

        - set_fact:
             info: "{{ output.stdout[0]['vms'][0] }}"    
             interface: "{{ output.stdout[0]['vms'][0]['interface'] }}"
             vlan: "{{ output.stdout[0]['vms'][0]['vlan'] }}"

          when: "{{ output.stdout[0]['vms'] | length }}"

        - debug: var=info 
          when: "{{ output.stdout[0]['vms'] | length }}"
        
      when: '"{{ id_type }}" == "vm_name"'

    - name: Find VM by Mac Addresss
      eos_command:
         commands:
            - command: 'show vmtracer vm mac {{ id }}'
              output: 'json'
         provider: "{{ provider }}"
      register: vmmac
      when: '"{{ id_type }}" == "mac_address"'

    - name: Find VMs on a Given Interface
      eos_command:
        commands:
           - 'show vmtracer interface {{ id }}'
        provider: "{{ provider }}"
      register: vmint
      when: '"{{ id_type }}" == "interface"'

    - block:
        - name: Find VMs on a given vlan
          eos_command:
             commands:
                - 'show vmtracer vm'
             provider: "{{ provider }}"
          register: vms

        - set_fact:
            filtered: "{{ vms.stdout[0] | filter_vms(id) }}"

        - debug: var=filtered

      when: ' "{{ id_type }}" == "vlan"'

    - name: Run Health Check
      eos_command:
        commands:
           - command: 'show interfaces {{ interface }} counters errors'
             output: 'json'
           - command: 'show interfaces {{ interface }} counters discards'
             output: 'json'
           - command: 'show interfaces {{ interface }} counters rates'
             output: 'json'
        provider: "{{ provider }}"
      register: counters
      when: 'interface is defined and "{{ run_check }}" == "Yes"'
      
    - debug: var=item
      with_items: "{{ counters.stdout }}"
      when: 'interface is defined and "{{ run_check }}" == "Yes"'

    - name: Run config check
      eos_command:
         commands:
            - command: 'show interfaces {{ interface }} trunk'
              output: 'json'
         provider: "{{ provider }}"
      register: configout
      when: 'interface is defined and "{{ run_check }}" == "Yes"' 

    - set_fact:
         trunkvlans: " {{configout.stdout[0]['trunks'][interface]['forwardingVlans']['vlanIds'] }}" 
      when: 'configout is defined and interface is defined'

    - assert:
         that:
            - '{{ vlan }} is in {{ trunkvlans }}'  
      when: 'configout is defined and interface is defined'

         



